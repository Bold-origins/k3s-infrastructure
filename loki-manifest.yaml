apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/component: memcached-chunks-cache
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-memcached-chunks-cache
  namespace: observability
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: memcached-chunks-cache
      app.kubernetes.io/instance: loki
      app.kubernetes.io/name: loki
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/component: memcached-results-cache
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-memcached-results-cache
  namespace: observability
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: memcached-results-cache
      app.kubernetes.io/instance: loki
      app.kubernetes.io/name: loki
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: canary
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-canary
  namespace: observability
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki
  namespace: observability
---
apiVersion: v1
data:
  config.yaml: |2

    auth_enabled: false
    bloom_build:
      builder:
        planner_address: ""
      enabled: false
    bloom_gateway:
      client:
        addresses: ""
      enabled: false
    chunk_store_config:
      chunk_cache_config:
        background:
          writeback_buffer: 500000
          writeback_goroutines: 1
          writeback_size_limit: 500MB
        default_validity: 0s
        memcached:
          batch_size: 4
          parallelism: 5
        memcached_client:
          addresses: dnssrvnoa+_memcached-client._tcp.loki-chunks-cache.observability.svc
          consistent_hash: true
          max_idle_conns: 72
          timeout: 2000ms
    common:
      compactor_address: 'http://loki-backend:3100'
      path_prefix: /var/loki
      replication_factor: 1
      storage:
        s3:
          bucketnames: loki-data
          endpoint: minio.storage.svc.cluster.local:9000
          insecure: true
          s3forcepathstyle: false
    compactor:
      shared_store: s3
    frontend:
      scheduler_address: ""
      tail_proxy_url: ""
    frontend_worker:
      scheduler_address: ""
    index_gateway:
      mode: simple
    limits_config:
      max_cache_freshness_per_query: 10m
      query_timeout: 300s
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      split_queries_by_interval: 15m
      volume_enabled: true
    memberlist:
      join_members:
      - loki-memberlist
    pattern_ingester:
      enabled: false
    query_range:
      align_queries_with_step: true
      cache_results: true
      results_cache:
        cache:
          background:
            writeback_buffer: 500000
            writeback_goroutines: 1
            writeback_size_limit: 500MB
          default_validity: 12h
          memcached_client:
            addresses: dnssrvnoa+_memcached-client._tcp.loki-results-cache.observability.svc
            consistent_hash: true
            timeout: 500ms
            update_interval: 1m
    ruler:
      storage:
        s3:
          bucketnames: loki-ruler
          endpoint: minio.storage.svc.cluster.local:9000
          insecure: true
          s3forcepathstyle: false
        type: s3
      wal:
        dir: /var/loki/ruler-wal
    runtime_config:
      file: /etc/loki/runtime-config/runtime-config.yaml
    schema_config:
      configs:
      - from: "2024-04-01"
        index:
          period: 24h
          prefix: index_
        object_store: 'filesystem'
        schema: v13
        store: tsdb
    server:
      grpc_listen_port: 9095
      http_listen_port: 3100
      http_server_read_timeout: 600s
      http_server_write_timeout: 600s
    storage_config:
      bloom_shipper:
        working_directory: /var/loki/data/bloomshipper
      boltdb_shipper:
        index_gateway_client:
          server_address: ""
      hedging:
        at: 250ms
        max_per_second: 20
        up_to: 3
      tsdb_shipper:
        index_gateway_client:
          server_address: ""
    tracing:
      enabled: false
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki
  namespace: observability
---
apiVersion: v1
data:
  nginx.conf: "worker_processes  5;  ## Default: 1\nerror_log  /dev/stderr;\npid        /tmp/nginx.pid;\nworker_rlimit_nofile
    8192;\n\nevents {\n  worker_connections  4096;  ## Default: 1024\n}\n\nhttp {\n
    \ client_body_temp_path /tmp/client_temp;\n  proxy_temp_path       /tmp/proxy_temp_path;\n
    \ fastcgi_temp_path     /tmp/fastcgi_temp;\n  uwsgi_temp_path       /tmp/uwsgi_temp;\n
    \ scgi_temp_path        /tmp/scgi_temp;\n\n  client_max_body_size  4M;\n\n  proxy_read_timeout
    \   600; ## 10 minutes\n  proxy_send_timeout    600;\n  proxy_connect_timeout
    600;\n\n  proxy_http_version    1.1;\n\n  default_type application/octet-stream;\n
    \ log_format   main '$remote_addr - $remote_user [$time_local]  $status '\n        '\"$request\"
    $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n
    \ access_log   /dev/stderr  main;\n\n  sendfile     on;\n  tcp_nopush   on;\n
    \ resolver kube-dns.kube-system.svc.cluster.local.;\n  \n\n  server {\n    listen
    \            8080;\n    listen             [::]:8080;\n\n    location = / {\n
    \     return 200 'OK';\n      auth_basic off;\n    }\n\n    ########################################################\n
    \   # Configure backend targets# Distributor\n    location = /api/prom/push {\n
    \     proxy_pass       http://loki-distributor.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /loki/api/v1/push {\n      proxy_pass       http://loki-distributor.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /distributor/ring {\n      proxy_pass       http://loki-distributor.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /otlp/v1/logs {\n      proxy_pass       http://loki-distributor.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n\n    # Ingester\n    location = /flush {\n      proxy_pass       http://loki-ingester.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location ^~ /ingester/ {\n      proxy_pass       http://loki-ingester.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /ingester {\n      internal;        # to suppress 301\n
    \   }\n\n    # Ring\n    location = /ring {\n      proxy_pass       http://loki-ingester.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n\n    # MemberListKV\n    location = /memberlist {\n      proxy_pass       http://loki-ingester.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n\n    # Ruler\n    location = /ruler/ring {\n      proxy_pass       http://loki-ruler.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /api/prom/rules {\n      proxy_pass       http://loki-ruler.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location ^~ /api/prom/rules/ {\n      proxy_pass       http://loki-ruler.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /loki/api/v1/rules {\n      proxy_pass       http://loki-ruler.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location ^~ /loki/api/v1/rules/ {\n      proxy_pass       http://loki-ruler.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /prometheus/api/v1/alerts {\n      proxy_pass       http://loki-ruler.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /prometheus/api/v1/rules {\n      proxy_pass       http://loki-ruler.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n\n    # Compactor\n    location = /compactor/ring {\n      proxy_pass       http://loki-compactor.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /loki/api/v1/delete {\n      proxy_pass       http://loki-compactor.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /loki/api/v1/cache/generation_numbers {\n      proxy_pass
    \      http://loki-compactor.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n\n    # IndexGateway\n    location = /indexgateway/ring {\n      proxy_pass
    \      http://loki-index-gateway.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n\n    # QueryScheduler\n    location = /scheduler/ring {\n      proxy_pass
    \      http://loki-query-scheduler.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n\n    # Config\n    location = /config {\n      proxy_pass       http://loki-ingester.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n\n\n    # QueryFrontend, Querier\n    location = /api/prom/tail {\n      proxy_pass
    \      http://loki-query-frontend.observability.svc.cluster.local:3100$request_uri;\n
    \     proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection
    \"upgrade\";\n    }\n    location = /loki/api/v1/tail {\n      proxy_pass       http://loki-query-frontend.observability.svc.cluster.local:3100$request_uri;\n
    \     proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection
    \"upgrade\";\n    }\n    location ^~ /api/prom/ {\n      proxy_pass       http://loki-query-frontend.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /api/prom {\n      internal;        # to suppress 301\n
    \   }\n    location ^~ /loki/api/v1/ {\n      proxy_pass       http://loki-query-frontend.observability.svc.cluster.local:3100$request_uri;\n
    \   }\n    location = /loki/api/v1 {\n      internal;        # to suppress 301\n
    \   }\n  }\n}\n"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-gateway
  namespace: observability
---
apiVersion: v1
data:
  runtime-config.yaml: |
    {}
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-runtime
  namespace: observability
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-clusterrole
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: loki-clusterrole
subjects:
- kind: ServiceAccount
  name: loki
  namespace: observability
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app.kubernetes.io/component: memcached-chunks-cache
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-chunks-cache
  namespace: observability
spec:
  clusterIP: None
  ports:
  - name: memcached-client
    port: 11211
    targetPort: 11211
  - name: http-metrics
    port: 9150
    targetPort: 9150
  selector:
    app.kubernetes.io/component: memcached-chunks-cache
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
    prometheus.io/service-monitor: "false"
  name: loki-gateway
  namespace: observability
spec:
  ports:
  - name: http-metrics
    port: 80
    protocol: TCP
    targetPort: http-metrics
  selector:
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app.kubernetes.io/component: canary
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-canary
  namespace: observability
spec:
  ports:
  - name: http-metrics
    port: 3500
    protocol: TCP
    targetPort: http-metrics
  selector:
    app.kubernetes.io/component: canary
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app.kubernetes.io/component: memcached-results-cache
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-results-cache
  namespace: observability
spec:
  clusterIP: None
  ports:
  - name: memcached-client
    port: 11211
    targetPort: 11211
  - name: http-metrics
    port: 9150
    targetPort: 9150
  selector:
    app.kubernetes.io/component: memcached-results-cache
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-memberlist
  namespace: observability
spec:
  clusterIP: None
  ports:
  - name: tcp
    port: 7946
    protocol: TCP
    targetPort: http-memberlist
  selector:
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/part-of: memberlist
  type: ClusterIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/component: canary
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-canary
  namespace: observability
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: canary
      app.kubernetes.io/instance: loki
      app.kubernetes.io/name: loki
  template:
    metadata:
      labels:
        app.kubernetes.io/component: canary
        app.kubernetes.io/instance: loki
        app.kubernetes.io/name: loki
    spec:
      containers:
      - args:
        - -addr=loki-gateway.observability.svc.cluster.local.:80
        - -labelname=pod
        - -labelvalue=$(POD_NAME)
        - -push=true
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: docker.io/grafana/loki-canary:3.4.2
        imagePullPolicy: IfNotPresent
        name: loki-canary
        ports:
        - containerPort: 3500
          name: http-metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /metrics
            port: http-metrics
          initialDelaySeconds: 15
          timeoutSeconds: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts: null
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      serviceAccountName: loki-canary
      volumes: null
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: gateway
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
  name: loki-gateway
  namespace: observability
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: gateway
      app.kubernetes.io/instance: loki
      app.kubernetes.io/name: loki
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 9a79a756cf641b1746e1b1b6ffc97a5fc17282df5abf309831cc406a0cb370dc
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-minio: kv/data/storage/minio
        vault.hashicorp.com/agent-inject-template-minio: |
          {{- with secret "kv/data/storage/minio" -}}
          export ACCESS_KEY_ID="{{ .Data.data.access_key_id }}"
          export SECRET_ACCESS_KEY="{{ .Data.data.secret_access_key }}"
          {{- end -}}
        vault.hashicorp.com/role: loki
      labels:
        app.kubernetes.io/component: gateway
        app.kubernetes.io/instance: loki
        app.kubernetes.io/name: loki
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: gateway
            topologyKey: kubernetes.io/hostname
      containers:
      - image: docker.io/nginxinc/nginx-unprivileged:1.27-alpine
        imagePullPolicy: IfNotPresent
        name: nginx
        ports:
        - containerPort: 8080
          name: http-metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: http-metrics
          initialDelaySeconds: 15
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /etc/nginx
          name: config
        - mountPath: /tmp
          name: tmp
        - mountPath: /docker-entrypoint.d
          name: docker-entrypoint-d-override
      enableServiceLinks: true
      securityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
      serviceAccountName: loki
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: loki-gateway
        name: config
      - emptyDir: {}
        name: tmp
      - emptyDir: {}
        name: docker-entrypoint-d-override
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations: {}
  labels:
    app.kubernetes.io/component: memcached-chunks-cache
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
    name: memcached-chunks-cache
  name: loki-chunks-cache
  namespace: observability
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: memcached-chunks-cache
      app.kubernetes.io/instance: loki
      app.kubernetes.io/name: loki
      name: memcached-chunks-cache
  serviceName: loki-chunks-cache
  template:
    metadata:
      annotations: null
      labels:
        app.kubernetes.io/component: memcached-chunks-cache
        app.kubernetes.io/instance: loki
        app.kubernetes.io/name: loki
        name: memcached-chunks-cache
    spec:
      affinity: {}
      containers:
      - args:
        - -m 8192
        - --extended=modern,track_sizes
        - -I 5m
        - -c 16384
        - -v
        - -u 11211
        env: null
        envFrom: null
        image: memcached:1.6.36-alpine
        imagePullPolicy: IfNotPresent
        name: memcached
        ports:
        - containerPort: 11211
          name: client
        resources:
          limits:
            memory: 9830Mi
          requests:
            cpu: 500m
            memory: 9830Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      - args:
        - --memcached.address=localhost:11211
        - --web.listen-address=0.0.0.0:9150
        image: prom/memcached-exporter:v0.15.0
        imagePullPolicy: IfNotPresent
        name: exporter
        ports:
        - containerPort: 9150
          name: http-metrics
        resources:
          limits: {}
          requests: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      initContainers: []
      nodeSelector: {}
      securityContext:
        fsGroup: 11211
        runAsGroup: 11211
        runAsNonRoot: true
        runAsUser: 11211
      serviceAccountName: loki
      terminationGracePeriodSeconds: 60
      tolerations: []
      topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations: {}
  labels:
    app.kubernetes.io/component: memcached-results-cache
    app.kubernetes.io/instance: loki
    app.kubernetes.io/name: loki
    app.kubernetes.io/version: 3.4.2
    helm.sh/chart: loki-6.27.0
    helm.toolkit.fluxcd.io/name: loki
    helm.toolkit.fluxcd.io/namespace: observability
    name: memcached-results-cache
  name: loki-results-cache
  namespace: observability
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: memcached-results-cache
      app.kubernetes.io/instance: loki
      app.kubernetes.io/name: loki
      name: memcached-results-cache
  serviceName: loki-results-cache
  template:
    metadata:
      annotations: null
      labels:
        app.kubernetes.io/component: memcached-results-cache
        app.kubernetes.io/instance: loki
        app.kubernetes.io/name: loki
        name: memcached-results-cache
    spec:
      affinity: {}
      containers:
      - args:
        - -m 1024
        - --extended=modern,track_sizes
        - -I 5m
        - -c 16384
        - -v
        - -u 11211
        env: null
        envFrom: null
        image: memcached:1.6.36-alpine
        imagePullPolicy: IfNotPresent
        name: memcached
        ports:
        - containerPort: 11211
          name: client
        resources:
          limits:
            memory: 1229Mi
          requests:
            cpu: 500m
            memory: 1229Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      - args:
        - --memcached.address=localhost:11211
        - --web.listen-address=0.0.0.0:9150
        image: prom/memcached-exporter:v0.15.0
        imagePullPolicy: IfNotPresent
        name: exporter
        ports:
        - containerPort: 9150
          name: http-metrics
        resources:
          limits: {}
          requests: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      initContainers: []
      nodeSelector: {}
      securityContext:
        fsGroup: 11211
        runAsGroup: 11211
        runAsNonRoot: true
        runAsUser: 11211
      serviceAccountName: loki
      terminationGracePeriodSeconds: 60
      tolerations: []
      topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate

